EVERY NEW LINE REFERS NEW CELL

import tensorflow as tf
import os
import pandas as pd
import numpy as np

df=df[5::6]
df

df.index = pd.to_datetime(df['Date Time'], format='%d.%m.%Y %H:%M:%S')
df[:26]

temp=df['T (degC)']
temp.plot()

def df_to_X_y(df, window_size=5): #window size is the number of SET of imputs we take for prediction
    df_as_np= df.to_numpy() 
    X = []
    y = []
    for i in range(len(df_as_np)-window_size):
        row = [[a] for a in df_as_np[i:i+5]]
        X.append(row)
        label = df_as_np[i+5]
        y.append(label)
    return np.array(X), np.array(y)

WINDOW_SIZE=5
X, y = df_to_X_y(temp, WINDOW_SIZE)
X.shape, y.shape

X_train, y_train =X[:60000], y[:60000]
X_val, y_val =X[60000:65000], y[60000:65000]
X_test, y_test =X[65000:], y[65000:]
X_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape, y_test.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

model1 = Sequential()
model1.add(InputLayer((5,1)))
model1.add(LSTM(64))
model1.add(Dense(8, 'relu'))
model1.add(Dense(1, 'linear'))
model1.summary()


cp = ModelCheckpoint('model1.keras', save_best_only=True)
model1.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0001), metrics=[RootMeanSquaredError()])

model1.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10, callbacks=[cp])

from tensorflow.keras.models import load_model
model1 = load_model('model1.keras')

train_predictions =model1.predict(X_train).flatten()
train_results = pd.DataFrame(data={'TRAIN PREDICTIONS':train_predictions, "ACTUALS" :y_train})
train_results

import matplotlib.pyplot as plt
plt.plot(train_results['TRAIN PREDICTIONS'][:100])
plt.plot(train_results['ACTUALS'][:100])

val_predictions =model1.predict(X_val).flatten()
val_results = pd.DataFrame(data={'val PREDICTIONS':val_predictions, "ACTUALS" :y_val})
val_results

plt.plot(val_results['val PREDICTIONS'][:100])
plt.plot(val_results['ACTUALS'][:100])

test_predictions =model1.predict(X_test).flatten()
test_results = pd.DataFrame(data={'test PREDICTIONS':test_predictions, "ACTUALS" :y_test})
test_results

plt.plot(test_results['test PREDICTIONS'][:100])
plt.plot(test_results['ACTUALS'][:100])
